import _typeof from "@babel/runtime/helpers/typeof";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import i18nextify from 'i18nextify';
import LocizeBackend from 'i18next-locize-backend';
import locizeEditor from 'locize-editor';
var i18next = i18nextify.i18next;
var enforce = {
  saveMissingTo: 'all'
};
var defaults = {
  reloadOnSave: true,
  bindSavedMissing: true
};
var reloadEditorOptions = {
  onEditorSaved: function onEditorSaved(lng, ns) {
    // location.reload();
    i18next.reloadResources(lng, ns, function () {
      i18nextify.forceRerender();
    });
  }
};
i18nextify.editor = locizeEditor;
i18next.use(LocizeBackend).use(locizeEditor);
var originalInit = i18next.init;

i18next.init = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var callback = arguments.length > 1 ? arguments[1] : undefined;
  options = _objectSpread(_objectSpread({}, defaults), options);
  var scriptEle = document.getElementById('locizify');

  if (scriptEle) {
    var config = {};
    var backend = {};
    var toRead = ['fallbackLng', 'saveMissing', 'debug', 'reloadOnSave', 'autorun', 'ele', 'cleanIndent', 'cleanWhitespace', 'namespace', 'namespaceFromPath'];
    var toReadAsArray = ['ignoreTags', 'ignoreIds', 'ignoreClasses', 'translateAttributes', 'mergeTags', 'inlineTags', 'ignoreInlineOn', 'ignoreCleanIndentFor', 'ns'];
    var toReadBackend = ['projectId', 'apiKey', 'referenceLng', 'version', 'allowedAddOrUpdateHost'];
    toRead.forEach(function (attr) {
      var value = scriptEle.getAttribute(attr.toLowerCase());
      if (value === 'true') value = true;
      if (value === 'false') value = false;
      if (value !== undefined && value !== null) config[attr] = value;
    });
    toReadAsArray.forEach(function (attr) {
      var value = scriptEle.getAttribute(attr.toLowerCase());
      if (value !== undefined && value !== null) config[attr] = value.split(',').map(function (item) {
        return item.trim();
      });
    });
    toReadBackend.forEach(function (attr) {
      var value = scriptEle.getAttribute(attr.toLowerCase());
      if (value === 'true') value = true;
      if (value === 'false') value = false;
      if (value !== undefined && value !== null) backend[attr] = value;
    });

    if (backend.allowedAddOrUpdateHost) {
      backend.allowedAddOrUpdateHosts = [backend.allowedAddOrUpdateHost];
      delete backend.allowedAddOrUpdateHost;
    }

    options = _objectSpread(_objectSpread(_objectSpread({}, defaults), options), config);
    options.backend = _objectSpread(_objectSpread({}, options.backend), backend);
  }

  if (options.reloadOnSave && (!options.editor || !options.editor.onEditorSaved)) options.editor = _objectSpread(_objectSpread({}, options.editor), reloadEditorOptions);

  if (options.bindSavedMissing) {
    options.backend.onSaved = function (lng, ns) {
      locizeEditor.handleSavedMissing(lng, ns);
    };
  }

  function handleI18nextInitialized(err, t) {
    // ready now
    // call orginal callback
    callback(err, t);
  }

  if (!options.backend.autoPilot || options.backend.autoPilot === 'false') return originalInit.call(i18next, _objectSpread(_objectSpread({}, options), enforce), handleI18nextInitialized);
  var locizeBackend = new LocizeBackend(options.backend);
  locizeBackend.getOptions(function (err, opts) {
    if (err && (typeof console === "undefined" ? "undefined" : _typeof(console)) === 'object' && typeof console.error === 'function') console.error(err);
    originalInit.call(i18next, _objectSpread(_objectSpread(_objectSpread({}, opts), options), enforce), handleI18nextInitialized);
  });
};

i18nextify.getLanguages = function (callback) {
  if (i18next.services.backendConnector) {
    i18next.services.backendConnector.backend.getLanguages(callback);
  } else {
    var ready = function ready() {
      i18next.off('initialized', ready);
      i18next.services.backendConnector.backend.getLanguages(callback);
    };

    i18next.on('initialized', ready);
  }
};

i18nextify.getOptions = function (callback) {
  if (i18next.services.backendConnector) {
    i18next.services.backendConnector.backend.getOptions(callback);
  } else {
    var ready = function ready() {
      i18next.off('initialized', ready);
      i18next.services.backendConnector.backend.getOptions(callback);
    };

    i18next.on('initialized', ready);
  }
};

export default i18nextify;